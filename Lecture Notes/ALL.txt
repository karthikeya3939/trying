3/1/23
====================================
Python Keywords :
	Keywords areunique or reserved words which are pre defined meaning.
C ==> 32/48
py==>35
ex:-True, False, None,assert, if , elif.....

#.....p10
===========
#prog to demonstrate keywords

a=(True==1)
print(a)
b=a+10
print(b)
c=(False==199)
print(c)
d=c+10
print(d)
===========
python Literals:
are classified into 4 categories

	String L
when evr we assign a string data to a var or const -->SL
s1="xyz"
types of string:
single line string - s1='ccc'
multi-'aaa
			bbb'


	Numeric L:
when evr we assign a numeric data to a var or const -->NL
a:int a=10
b:float b=1.1
c:complex: c=2+3j


	Boolean L:
when ever we assign a boolean data to a variable o\r const --> BL
a=True
b=False
print( )

	Special L
when ever we assign a None data to a variable or const Sp.L

a=None
p11.py==>prog to demonstareat Literals
=====================
LAB
====================
Python Ops:
	they are symbols which performs a specific operation on operands
Ex: a+b, a*c, x/y, (a+b)*d............
+, _. *, /===>operatoers
ag,d,f,h,===>operands

In general Op are classified into 3 Cat
1)Unary
	Any operation--Single operand
ex:	a++
2)Binary
	Any operation--Two operand
ex:	a+b
3)Ternary
	Any operation--Three or more operand
ex: (a+b)*c


Python Operators:
1)Arithmetic op:
	+, -, *, /, %, //
2)relational:
	< > <= >= != ==
3)Logical:
	&& || !
4)Bitwise:
	& | ^ ~ << >>
5)Assignment:
	=
Note:
	+= -= *= /= %= //=
6)membership :
	in		: if 1st found in 2nd returns true
	not in  :if 1st not found in 2nd returns true
7)Identity
	is		: if 1st and 2nd points to same Obj returns true
	is not     :if 1sst and 2nd points to diff Obj returns true
====================
p12.py ==>arth op --> //
p13.py===Rel		!=
p14======Log		||
p15 bitwise ~
p16 Arth assignment %=
p17  membership not in
p18 identity is
======================
python control structure statements:
 CS statements are the one which alters/change the flow of execution of a program
1)py Dec making statements   ---> to skip
>if
>if else
>nested if
>elif

2) python loops---->to repeat
>for
>while
>do-while
> optional for each

python DMS
> if
	syntax:
		if cond:
			statements



========================================================
>if else

syntax:
 
if cond:
	statements
else :
	statements


ex:	p20.py
a=10
if a%2==0:
	print("Even no")

else :
	print("odd no")

>nested if

Syntax :
	
	if cond :
		if cond :
			if cond :
				statements ====> it executes only if all the three conditions are true

EX : p21.py

a=18
if a<10:
	if a>5:
		print("a is less than 10 and greater than 5")
	else :
		print("inner if not executed")
else:
	print("outer if not executed")

>elif
if cond:
	statement
elif cond:
	statement
elif cond:
	statement
else:
	statement


ex p22.py
a=7
if a<5:
    print("if executed")
elif a%2==0:
    print("1st elif executed")
elif a==5:
    print("2nd elif executed")
else:
    print("all conds fail")

======
Python Loops:
	> for loops
	> while loops
	> do-while loops

for loops:
Syntax:
	for var in sequence:
		statements

Sequence =list,tupl,dic,set,string

Ex:p23.py
veh=["bike","car", "flight"]
for x in veh:
	print(x)

Ex:p24.py
s="abcd"
for x in s:
	print(x)

Note : else in for loop

Ex:p25.py
s="abcd"
for x in s:
	print(x)
else:
	print("for loop completed sucessfully")


Note : Builtin fun -=> range( )
it returns a valuees starting from 0 to range-1 with incm of 1 at a time

Ex :26.py
for x in range(6)
	print(x)     ============>displays starting from 0 to 5

Ex :27.py
for x in range(6,20)
	print(x)   =========> displays starting from 6 to 19

Ex :28.py
for x in range(3,30,4)
	print(x)    ==================>displays starting from 3 to 30 with incrementation of +4


===================
7/1/23
Note :
nested loops:
	loop within a loop

Ex >> 29.py
vehi=[ "cycle" , "bike" , "car"  ]
yr=[ "2001" , "2010" , "2020"  ]
for x in vehi :
	for y in yr :
		print(x,y)

=====
>>while loop :
	Syntax :
		initialization
		while cond:
			statements
			icrement/decerment
ex p30
i=10
while(i>0):
    print(i)
    i-=1
    
ex p31.py
i=10
while(i>0):
    print(i)
    i-=1
    
else:
	print("while exec")

====
>>do while
	this is wrong. there is no do while in python ;like c
	this is renamed in py as
		-while wiht break stmt
		-while wiht exit stmt
ex 32.py
i=10
while(i>0):
    print(i)
    i-=1
    if(i==5):
	break

===========
>>break
	==to terminate from current loop
	== suntax : break
exx p33.py
    
vehi=[ "cycle" , "bike" , "car"  ]
for x in vehi :
	print(x)
	if x=="bike":
		break

====
>>continue:
	to skip all stmts after continue but exec remains in the same loop
syn : continue
Ex : p34.py


==
pass
	it is used to do nothing.

ex 35
for lopala pass

p36.py=palindrome
p37.py=display all pal bw 1 to 100
p38.py=prime
p39.py=to display all prime in 1 to 100
p40.py=to swap 2 numbers


=\==========/=/=/=/=/=/=/=/=/=/=//=/=/=/=/=//==/=
10/1/22
============
python functions:
	it is defined as set of stmts or group of stmts or block of code which performs a specific task.
SYN:
def fn_name(args) :
	stmts


====p41====
def add(a,b):
	return a+b

print(add(1,2))

===========
Advantages of fun:
>>reusabilit of code
>>educes the size of code
==========
classifications of fun:
>>user defined
>>built-in

>> user:
	defined by users

def add(a,b):
	return a+b

print(add(1,2))

>>built-in:
	pre defined
ex:print, input, abs, range.....

x=input("enter a number")
20
print(x)

y=input()
30
print(y)

z=int(input())
2
print(z)
if anything othe than int like 9.22 then u r idiot :D

===================
types of fun's:
>>fn with no args and no return type
>>fn with no args and return type
>>fn with  args and no return type
>>fn with  args and  return type


1) fn with no args and no return type:
def add():
	a=int(input())
	b=int(input())
	print(a+b)

add()
=============
2) fn with no args and  return type:
def add():
	a=int(input())
	b=int(input())
	return (a+b)

print(add())
=============
3) fn with args and no return type:
def add(a,b):
	print(a+b)

a=int(input())
b=int(input())
add(a,b)
===========
4) fn with args and return type:
def add(a,b):
	return (a+b)

a=int(input())
b=int(input())
print(add(a,b))

==========
p43
special way:
def add(a:int,b:int)->int :
    print(a+b)

a=int(input())
b=int(input())
add(a,b)
============
types of arg:
>>Default arguments:
====p44.py======
def add(a,b=20):
	return a+b
print(add(1,2)) ===>3
print(add(1))=====>21
===p45=========
def add(a=10,b=20):
	return a+b
print(add(1,2)) ===>3
print(add(1))=====>21
print(add())====>30
============
>>Keyword Arguments:
=======p6======
def student(name,r):
    print(name,r)
(student("aaa",1))
(student("aaa",r=111))
(student(r=1,name="aaa"))

note :
	they are known as named arguments..

=========
>>Required args:
	no of args in fn call == no of args in fn
ex:
def student(name,r):
    print(name,r)
(student("aaa",1))
===========
====p47=====
def add(a,b):
	return a+b
add(10,20

all three...
============
>>4) arbitrary args:
	 it is called as variable length args
========p48==========
def dis(*a):
    for i in a:
        print(i)
dis(1,2,3,4,5)
=================================
Recursive functions:
	fun which calls itself==>recursive fun
p49=
def fac(x):
    if x==1:
        return x
    else:
        return(x*fac(x-1))
print(fac(3))

=====================
lambda function:
	it is a fun which allows you to have multiple arguments but only one expression.
syntax:
	lambda arguments : expression
===========p50=======
"""x=lambda a:a+100
print(x(10))
"""
"""
y=lambda a,b:a*b
print(y(10,10))"""
z=lambda a,b,c:a+b+c
print(z(10,20,30))
==============================================

PYTHON ARRAYS:
	
>> array is a apl varoiable which can hold more than one value at a time.
>> an array can hold many values under a single name and u can acces sthe values by 	referriing to its index number.
>> arrays are used to store multiple valuse in one single variable.

Syntax :
		arr=[items seperated by comma]

	veh=["car" , "bike" , 10]
	arrays in python are almost same as list data type.

===========
>>>accessing elemnts of an array:-
	ex-p51
		x=veh[1]
		print(x)
==========
>>> length of array:
	ex p52
		y=len(veh)
		print(y)
==========
>>>looping array  elements:-
	ex p53
		for x in veh:
			print(x)
==========
>>> adding array elements:
	ex p54:
		veh.append("cycle")
		veh.append(111)
==========
>>> removing array elements:\
	-remove
	-pop
	ex 
		veh.remove("cycle")
		veh.pop(111)
==========
>>> remove all array elements:
	- clear( )
		veh.clear( )
==========
>>> to count number of array elements:
	- count( )
		veh.count( )
==========
>>> to sort array elements:
	- sort ( )
		veh.sort( )
==========
>>> to reverse array elements:
	- reverse( )
		veh.reverse( )
===============================================
Python OOP : 
========================================
//////////////////////////////////////
24 january 2023
////////////////////////////////////
============================================
principles of oops
class
ob
method
inherit
polymorpfism
enacp
abstra
dynamic
message

Python Object Oriented language : -- 
>	puthon is an obj oriented prog language
>	py uses obj oriented approach to design any applications
>	some of major principles of obj oriented prog are
	=>class
	=>object
	=>method
	=>inheritance
	=>polymorphism
	=>encapsulation
	=>data abstraction
	=>dynamic binding-----optional

Class :
>	it is a collection of objects.
>	class contains data members and methods & member functions.
	Syn:
		class classname{
				data members

				member functions
		}

Example :
		class ClassName :
				id = 310
				name= "kkk "

				def disple( ) :
						prnt("cvbjkl")
		
=================
2 )  Object :
			it is an instance of class
Syntax :
	obname = ClassName( )
EX :
	s1=student( )
======53.py========
class stud:
    id = 310
    name= "kkk"
    def dis(self) :
        print(self.id,self.name)
s=stud()
s.dis()
==================
3) Method:
		a member function in a class is called as method
		Ex:
    def dis(self) :
        print(self.id,self.name)
=====================================
||	Note :																||
||	special method : Constructor						||
||		they are defined to initiate the  			||
||		instance mebers of aclass						||
==>constructors are invoked automatically at the time of obj creation
||		syn: method__init__() ==>constructor  ||
||		classifications of constructors :
||			parametriswed and non parametrised

1) parametrised constructors:
========p54.py==========
class stud:
    def __init__(self,id,name):
        self.id=id
        self.name=name
    def dis(self) :
        print(self.id,self.name)
s=stud(100,"karthikeya")
s.dis()
		

2)non parametrised constructors:
class Stud:
    count=0
    def __init__(self):
        Stud.count+=1
s1=Stud()
s2=Stud()
s3=Stud()
s4=Stud()
s5=Stud()
print(Stud.count)
============================
More than one constructor in a class
eX:
========p56.py=======

class Stud:
    def __init__(self):
        print(1)
    def __init__(self):
        print(2)
s1=Stud()
==================================
4) Inheritance:	
>>acquiring prop from onre class to another class is known as inheritance
>> class from where u acquire properties are known as ("base" class)
>> class into which u acquire properties are known as ("derived" class)

Note :
	acquiring prop from base calss to derived class is kmown as inheritance.

Types of inheritances :-
	1) Single Inheritance
	2)	Multiple Inheritance
	3) MultiLevel Inheritance
	4)	Heirarchial Inheritance
	5)	Hybrid Inheritance

1) Single Inheritance :--
	acquring prop from one base class to one derived class.
Syntax : 
class Base : 
	class-block
class Derived(Base):
	class-block

Ex:
============p57.py==============
class Base:
    def fn1(self):
        print("Base class")
class Derived(Base):
    def fn2(self):
        print("Derived class")
ob=Derived()
ob.fn1()
ob.fn2()
        



2)Multiple Inheritance :--
	acquiring properties from multiple base classes to one derived class.
Syntax : 

class Base1 : 
	class-block
class Base2 : 
	class-block
class Base3 : 
	class-block
class Derived(Base1,Base2,Base3):
	class-block

Ex:

============p58.py==============


3) Multi Level Inheritance:
	acquiring properties from one class to another class, 
and the from that class to another class in multiple levels is knowwn as multilevel inheritance.
Syntax : 

class A : 
	class-block
class B(A) : 
	class-block
class C(B) : 
	class-block
class D(C) : 
	class-block

Ex:

============p59.py==============


4)Heirarchial inheritance:
	acquiring the properties from one base class to multiple derivred classes
Syntax : 

class Base : 
	class-block
class Derived1(Base) : 
	class-block
class Derived2(Base) : 
	class-block
class Derived3(Base):
	class-block


Ex:
============p60.py==============


5)Hybrid inheritance:
	combination of heirarchial inheritance and multiple inheritance is knnown as Hybrid inheritance
Syntax : 

class Base : 
	class-block
class Derived1(Base) : 
	class-block
class Derived2(Base) : 
	class-block
class NewDerived(Derived1, Derived2):
	class-block

Ex:
============p61.py==============






==========================================

28-1-23
==========================================

polumorphism is a geekword
poly means many and morphism means forms
so polymorpfism is referred to many forms

Types :
1)compile time poly
2)run-time poly

1)compile time poly :
	
ex : overloading
==========p62=============
class ab:
    def add(self,a=0,b=0,c=0):
        return a*b*c
ob=ab()
print(ob.add())
print(ob.add(1,2))
print(ob.add(100,1,5))
==========================
2)run time;
	ex : method over riding


============================
6) encapsulation :
wrapping up of code and data together into single unit.

7) data abstractions:
it refers to providing only essential info to outside code by  hiding all its background code.

-=====note====
data hidimg :
hiding of data refers to data hiding
>> can be implemeted by __ at the start of data.
Ex :
class A:
	id=1
	name="aaa"
	__sgpa=7.01
=====================================================================
principles of oops completed
=====================================================================
==============note================
popular built in fun i python 
>>getattr(obj,name)
>>setattr(obj,name,val)
>>delattr(obj,name)
>>hasattr(obj,name)
>>getattr(obj,name)
	used to access the attribute of an object
>>setattr(obj,name,value):
	used to set the value of an obj of an attribute
>>delattr(obj,name):
	used to del an attribute of an object
>>hasattr(obj,name):
(my def)	used to check whether it has an attribute or not
sir==> used to check whether an attr of an obj is found or not
		returns true if attr is found and vice versa

=================================================================================
31/1/23
============================================================================
somr of the popular modules :
1) 	datetime
2)	math
3)	re
4)	os
5)	cse=======>comma seperated
6)	jsoa ===>java script object notation


1) datetime :
	it is amodule which consisting of classesrelated to date and time.
==========p68.py============

import datetime
a=datetime.datetime.now()
print(a) -------> todays date and time
print( a.year)

==========p69.py==========
import datetime
d=datetime.datetime.fromtimestamp(1887699468)
print(d)

========p70.py=============
import datetime
t=datetime.date.today()
print(t.year)
print(t.month)
print(t.day)

======================
2)	math
it is a module which conssits of diff mathematical operations.
EX:
============p71.py=============
import math
a=max(1,2,3,4)
b=min(10,20,1)
print(a/b)

==========p72.py==================
import math
a=10
print(math.factorial(a))

============p73.py================

import math
print(math.fabs(-10000.11))

===============================
3) re regular expression:
	it is a module consisting of set of constraints used to find a string getting matched or not.

Ex :
============p74.py=============
import re
a=" in KLU at KLU "
b= r.findall ("KL" , a)
print(b)

Note:
split
=============p75.py=============search
=============p76.py=============split
=============p77.py=============sub
4)os
it is a module which consist of all operating system commands.
some of the pre defined methods of os are :-
>>	getcwd ( ) ---------> to know current working directory ==========p78
>>	chdir( )------------> to change working directory==========p79
>>	listdir( ) -----------> to display  list of files in current dir==========p80
>>	help( ) ---------------> to know about anything in detail==========p81
		ex : help (print)

5)	csv
>>	Stands for comma seperated values .
>>	This module is used to deal with data which is in tabular form .
>>	SOme of the imp operations in CSV files are
		i)	read ( ) - which is used to read the data from the csv file.
							or
					-  used to access

		ii)	write( ) - used to write the data into csv file
					or
					to store the data.

		iii)	update( ) - used to update the data in csv file.
		
		iv)	delete( ) - used to delete a data from csv file.

Ex :
=============p82.py============read
import csv
=============p83.py============write
import csv
=============p84.py============update
import csv
=============p85.py============delete
import csv
======================================

=================================================
4/2/23
=================================================
Exception Handling:

	Exception is a python object which represents an error.
								or
	It is an event which occurs during the execution of program which generally disturbs the flow of execution of a program.

	Types of errors:
1)	compile time error
2)	run time error

1)	compile time error
		The errors which are occured during compile time of program are known as compile time errors.
		Any syntax errors in program are compile time errors.

		compilation ----> High level		 to		 machine level
		execution

Ex:
def add (A,b)----------> there is no(:)--------> so syntax error==> compile time error
	print(A+b)


2)	run time error
		The errors which are occured during run time which is second phase of program are known as run time errors.

		All run time errors need to be handled by programmers (us)
		
	>>Exception handling uses following terminology in order to handle all run time exceptions
	1)	try :
			Block of code which contains an exception.

	2)	except :
			This block of code runs whenever there is an execution.

	3)	else
			This block of code will execute when there is no exception.

	4)	finally
			This block of code always executes irrespective of whether an execution exists or not.

syntax :
try:
	block of code
except e1:
	block of code
except e1:
	block of code
else:
	block of code
finally :
	block of code

Note:
Types of Eception:
1) Exception
2)	Arithmetic Error
3) EOFError
4) ImportError
5) ZeroDivisionError
					........................
================================================
PYTEST
Pytest:
irctc
11-02-23=====================================
===============================================
PYTEST
Pytest:

>	Pytest is atesting framework which is based on python.
>	It is mainly used to write test cases in python language.
>	It helps yoy to write simple and scalable test cases for databases, UI (User Interface), and APIs.
>	It is mainly used for APIs.
>	Pytest works based on Unit testing.

Advantages
>	it is open source.
>	can run multiple test cases in paralle, which can reduce the execution time.
>	very easy to use bcoz of its simple syntax.

Installation of py module
> to strtin with pytest we need to install ----> pytest
________________________________
|command ::  pip install pytest|
------------------------------------------------------

creating or identifying test functions and file :
	functions : test_anyname( )
		ex :		def test_sample( ):

	file : test_*.py    | |   *_test.py
			test_p91.py | |    p91_test.py

==============p91_test.py==============
92
93
94 -- ut own
=====================================
note
1	to run all files in folder ---> pytest
2	to run specific file ----> pytest filename.py
3	to run specific file with detailed testcases 
									----> pytest filename.py -v
4	to run a specific method from a file 
									-----> pytest :: method name


markers:
>	markers are used to set various features or attributes to the test function.
>	it allows u to execute a specific test cases or a set of test cases.
Syntax :
	@pytest.mark.markername
ex:
	@pytest.mark.m1
	def test_sample ( ) :
		assert fn(4) == 5  		==> fn( X) returns increment value

Fixures :
	fixures are used to provide an input to the testfunction.
Syn
	@pytest.fixtures
ex:
	@pytest.fixtures
	def test_sample ( ) :
		assert fn(4) == 5  		==> fn( X) returns increment value

parameterize test :
	callng a test fnct for multiple no of times by changing parameter input
Syntax :
	@pytest.mark.parameterize
ex:
	@pytest.mark.parameterize
	def test_sample ( ) :
		assert fn(4) == 5  		==> fn( X) returns increment value

=====================================
Python complete
===============================================
---------------------------------------Questions------------------------------------
95) Armstrong or not.================58 to 61,63 to 68,

96) #program to print ascii value for given charecter

97) 

111) to print factors of no

************************************************************************
============================================================
--------------------------------------------------FULL STACK-------------------------------------------
============================================================
************************************************************************

Front - end development
----------------------------------------
Flask	:----wsg
	
	>Flask is a web application framework written in python
	>It is considered as micro framework.
	>some of the popular web applications are:
		Flask, Django, pyramid, cherrypy.
	>It was developed by "armin" .
	>Its designed based on WSGI ( Web Server Gateway Interface ) Toolkit
and Jinja2 template engine .
	>default port no -->5000
	>URL to access a flask application
			http://127.0.0.1:5000

WSGI Toolkit : 
-----------------------
	It is a toolkit used for python web development or used to build py web application.
	
	It acts as an interface b/w web server and application .
	
Jinja2 :
------------
	It is a web template engine

	It combines a template with a certain code or data source to render a dynamic web pages.
	
	
Web Pages:
	>Static
	>Dynamic


Flask Enirinment Setup:
	python with a version 2.7 or above.

	To install flask 
			pip install flask


================================================
First Web application using Flask 
import Flask
appp=Flask(__name__)

@appp.route("/")
def sam():
    return "Hello World"

if __name__=="__main__":
    appp.run()






===========================================
dynamic routinig 

ex========
import flask
app=flask.Flask(__name__)

@app.route("/")
def sam():
    return "Hello World"

@app.route("/<name>")
def sam1(name):
    return f'hi ... nee peru {name} inka nuvv erripuku vi'

if __name__=="__main__":
    app.run()
========================================================


HTML
>	hyper text markup language
> 	is used to create static web pages
>	invented by Time Berners Lee  &  he is the one who invented internet in 1991m
>	hypeer text refers to linking of webpages together
>	markup lang refrs to a document which tells you how to structurise its display


specifications of HTML :

>HTML 1.0
>2.0
>3.2
>4
>HTML 5 (Latest version)


Adv of Html :
>open source
>easy to undrstan
>user friendly
>troubleshhoting or debugging is easy
>flexibility

Html Structur :
------------------------------

<html>
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
<marquee>karthikeya is erir</marquee>
</body>
</html>
-------------------------------


html tag:
----------------
	ANY WORD which is enclosed within angular brackets 

html element:
-----------------------
tag and element are same but must have start tag contain element
<h1> start </h1>

ex---
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>kkkk</title>
</head>
<body>
<h1>This is first html</h1>

</body>
</html>
-------------------------------------------------------------------

			Basic html tags 

1 ) Text formatting Tags
	a.headings
		denoted by <h1> ......... <h6>   big size to small size respectively ..
			ex : <h3>mmmm</h3>

	b.	paragraph tag :
		denoted by <p>.......</p>
			ex:  <p> aaaa
						aaaa
						aaa
					aaa</p>
	c.	pre formatted tag :
		denoted by <pre>.......</pre>
			ex:  <pre> aaaa
						aaaa
						aaa
					aaa</pre>
	b.	break tag :
		denoted by <br>
			ex:  <p> aaaa<br>
						aaaa<br>
						aaa<br>
					aaa</p>
	e	bold tag :
		denoted by <b>
			ex:  <b> aaaa<br>
						aaaa<br>
						aaa<br>
					aaa</b>
	f.	break tag :
		denoted by <i>
			ex:  <i> aaaa<br>
						aaaa<br>
						aaa<br>
					aaa</i>
	g.	underline tag :
		denoted by <u>
			ex:  <u> aaaa<br>
						aaaa<br>
						aaa<br>
					aaa</u>
	h.	big tag :
		denoted by <big>
			ex:  <big> aaaa<br>
						aaaa<br>
						aaa<br>
					aaa</big>
	i.	small tag :
		denoted by <small>
			ex:  <small> aaaa<br>
						aaaa<br>
						aaa<br>
					aaa</small>
	j.	Strike tag :
		denoted by <strike>
			ex:  <strike> aaaa<br>
						aaaa<br>
						aaa<br>
					aaa</strike>
	k.	delete tag :
		denoted by <del>
			ex:  <del> aaaa<br>
						aaaa<br>
						aaa<br>
					aaa</del>
	l.	mark tag :
		denoted by <mark>
			ex:  <mark> aaaa<br>
						aaaa<br>
						aaa<br>
					aaa</mark>
	m.	superscript tag :
		denoted by <sup>
			ex:  <sup> aaaa<br>
						aaaa<br>
						aaa<br>
					aaa</sup>
	n.	subscipt tag :
		denoted by <sub>
			ex:  <sub> aaaa<br>
						aaaa<br>
						aaa<br>
					aaa</sub>
	o.	horizontal ruler tag :
		denoted by <hr>
			ex:  <p> aaaa<br>
						aaaa<br>
						aaa<br>
					aaa</p>
				<hr>
	p.	marquee tag :
		denoted by <marquee>
			ex:  <marquee>hhhhh</marquee>

NOtee ::
		Attribute :
		>	Attributes are used to display the properties of a tag
		>	they will have name and value
		Syntax::
			use after open tag
			<tag attrname=attrval>

@@@2
2)	Anchor Tag
	denoted by <a>
	ex:
		<a href="https://www.google.com"> google</a>
	img
4)audio tag
	<audio controls>
		<source src="C:\Users\Karthikeya Kuchipudi\Music\Imagine Dragons - Believer 			(Lyrics).mp3">
	</audio>

5)	video tag
<video controls>
		<source src="C:\Users\Karthikeya Kuchipudi\Music\Imagine Dragons - Believer 			(Lyrics).mp3">
	</video>
6) List tag :
>>	 List is collection of items
		types of list tags
		-------------------------
	a	unordered list			
	b	ordered list
	c	descriptive list / definition list

>> List tag is denoted by <li>
	unordered list tag --> <ul>
	ordered list tag --> <ol>
	descriptive/definition list tag --> <dl>

UNOrDERED LIST :
ex:
<ul type="circle"> 
	<li>a</li>
	<li>a</li>
	<li>a</li>
	<li>a</li>
	<li>a</li>

</ul>
OrDERED LIST :
ex:
<ol type="A" start=24> 
	<li>a</li>
	<li>a</li>
	<li>a</li>
	<li>a</li>
	<li>a</li>

</ol>

	


-=-=-=-=-=-=-==--============================
Descriptive list 

<dl>
	<dt>cse</dt>
	<dd>faculty</dd>
	<dd>students</dd>
</dl>
===================
7 . Table tag
<table border=5>
<caption>vvv</caption>
<tr>
<th> reg</th>
<th> name</th>
<th> gpa</th>
</tr>
<tr>
<td> 1</th>
<td> a</th>
<td> 1</th>
</tr>
<tr>
<td> 1</th>
<td> a</th>
<td> 1</th>
</tr>
<tr>
<td> 1</th>
<td> a</th>
<td> 1</th>
</tr>
</table>
===============================

8 )   Forms :
>> forms are used to collect the data.
>> data can be collected using form elements .
>>	the different form elemnts are :
	a input

		i	text
		ii 	radio button
		iii	button
		iv	check box

	b selection
	c text area

>>denoted bt <form>


a Input :
-------------
text
<form>
	First Name : <input type="text" name="fn">
	last Name : <input type="text" name="ln">
	mobile number : <input type="number" name="mb">
	password : <input type="password" name="pwd">
	DOB : <input type="date" name="dob">



</form>
========================

radio button
ex:
<form>
	First Name : <input type="text" name="fn">
	last Name : <input type="text" name="ln">
	mobile number : <input type="number" name="mb">
	password : <input type="password" name="pwd">
	DOB : <input type="date" name="dob">
Gender :
		<input type="radio" name="r" value="male">MALE
		<input type="radio" name="r" value="female">FEMALE



</form>
-=======-=-=-=-==-=-=-=-=-=--=
3) button:
================
	<input type="button" value="register">
	<input type="reset" value="clear">
	<input type="submit" value="click here">
==========================
4) checkbox;
fav cource:
	<input type="checkbox" name="cb" value="da">da
	<input type="checkbox" name="cb" value="da">da
	<input type="checkbox" name="cb" value="da">da
	<input type="checkbox" name="cb" value="da">da
	<input type="checkbox" name="cb" value="da">da
	<input type="checkbox" name="cb" value="da">da<br>
=============================
b) selection
ex:
Branch:
	<select>
		<option>a</option>
		<option>a</option>
		<option>a</option>
		<option>a</option>
		<option>a</option>
		
	</select><br>
=========================
c) Text Area 
address:
	<br><br>
	<textarea>


	</textarea>

	<br><br>
=============================
Note:
Form attributes:
>>	attribute associates to a form tag refers to form attributes.
>>	the form attributes are :
	- action
	-method
===============
Action
Ex :
	action="index.html"

Post
method="POST"
====
Assignment'
Cascading Style Sheet(CSS)
can be implemented in 3 ways;
>inline
>internal
>external
any one way
===========================
4th example:---
#context passing to template
@app.route("/template1/<name>")
def sam3(name):
    return render_template("index2.html",name=name)
======================
5th





==============================

6th 

# redirect
@app.route("/route/template2/<role>")
def sam4(role):
    if role=="kkk":
        return redirect(url_for("sam2"))
    else:
        return redirect(url_for("sam3",name=role))
==========================
#list rendering using for loop
















===============================================================================================================
						Mongo DB

Introduction to NOSQL :
-->		NOSQL Stands for Not only Structured Language.

-->		Nosql databases are non- relational databases whereas sql dbs are relational databases.

NOTE :
1 ) Relational DB
-	It is a db which stores and provides data related to each other
-	the system which maintains relational DB is refered to be RDBMS(relational database management system)
-	SQL -- relational --- tables
	NOSQL -- non relational -- no tables
- Nosql is specially designed for a large set of a data (Big data)

		Big data : 
			It can be defined using three charecteristics
				- velocity ( speed at which data arrives to a database)
				- volume (size of the data)
				- varieties of data (comments, images, videos etc.....)
All these together defines Big Data


In general data will be in form of 
		 	-structured data
			unstructured data
			semi structuredata
			unpredictabledata

Some of the popular No sql databases are
	- MongoDB
	- DynamoDB
couch
cassandra
neo4j
riak

Diff b/w SQL & NOSQL
--------------------

Sql
==================
1. Data stores in tables
2. Sql is structured data
3. it is used for relatively smaller data
4.scalability is limited


Nosql
===================
1. Data is not stored in tables
2.it is unstructured data
3. it is used for relatively larger data
4.scalability is limited


Types Of Nosql Databases :
	
1. Document based DB  (MongoDB)
2.	Key valued base DB
3.	Graph based DB
4. 	Colum based DB

Intro to MongoDB

-MongoDB is one of the most popular examples of a document-oriented database.
- it is an open-source with high performance
-	It is highy scalable
-	stores in form of json format
-	developed by 10gen
- 	docment based db will consists of collection, docs, fields

Features of MONGO DB

-	it does not require a relation model
-	it doesnt require any schema
-	it doesnt require ay table
-	it doesnt require any query lang
-	it doesnt require any normalization
MongoDB completely works based on aggregation 

Diff b/w MongoDB and Oracle"
Mongo
=======================
1.stores data in form of collections.
2. unit of data is stored in document
3. dynamic schema
4.	can perform CRUD operations on collections
5. primary key uniquely identifies a document
6.it is noqsl

Oracle
===========================
1.stored in form of tables
2. unit of data is stored in records
3. fixed schema
4.	can perform CRUD operations on tables
5. primary key uniquely identifies a record
6.it is sql

Mongo :
-	intro to nosql
-	intro to mongodb
-	mongodb env setup
-	basics of mongodb
-	how to create collection & documents
-	CRUD Operations
-	find and pretty funcrions
-	Summary

Mongodb enironment setup
----------------------------------------------
-
- Mongodb is a leading nosql database
- Mongodb is written in C++.

Advantages:
	- Schema less
	- Fast performance (100 times faster than sql db)	-	-	- Easy to scale
	
Special features og mongoDB :
	- Scalability
	- Performance
	- high availability
	-development is easy
	- ""           ""   is faster
	- Load balancing

Applications of MongoDB / Whwrw to use MongoDB:
	-dealing with Big Data
	-Data Hub
	- Social and mobile networking
	- Data Management
	- Content Management
	
MongoDB data types :
	1) String
	2) Boolean
	3) Integer
	4) Double
	5) Arrays
	6)	 Min
	7)	 Max
	8)	 Null
	9)	 Object
	10)	 Symbol

Database Creation :

Syn :
	use DB_NAME
Ex:
	use KLU-V

Note :
	if the db name does not exist, it will create a db name input and switches to the same db.

	if the name exists, it will simply switches to the same db.

Drop Database
--------------------------
Syn ;
		db.dropDatabase( )

Ex :
		use KLU-H
		db.dropDatabase( )---->doubt

creating collections & Documents :
-----------------------------------------------------------
Collections
-----------------
-	Collection is a set of documents
Syn :
	db.createCollection("name")
Ex:
	db.createCollection("CSE")

Drop Collection:
---------------------------
Syn:
	db.COLLECTION_NAME.drop( )
Ex :
	db.CSE.drop( )

Documents:
	They are used to store the data in MongoDB database
	db.COLLECTION_NAME.insert( document)
Ex-1: 
	db.CSE.insert(
		{
			"Course" : "PFSD"
		}
	)

Ex-2 "
db.CSE.insert(
		{
			"Course" : "PFSD",
			"Category" : "Cluster1"			
		}
	)

Ex-3 :
db.CSE.insertMany(
	[
		{
			"Course" : "PFSD"
		},
		{
			"Course" : "MSWD",
			"Category" : "Cluster1"			
		},
		{
			"Course" : "PSQT",
			"Category" : "Cluster 1"	
			"Details"  :  {
						"faculty" : "absd"
							"id" : 1

						}	
				
		}
	]

	)


CRUD Operations :
-------------------------------
-	Different CRUD Operations performed on a document are :
	1) Create
	2) Retrieve

	3) Update
	4) Delete

1) Create :
	Insert a single document
	Insert multiple Documents

Practise
	Ex: create a collection named " ECE " 
			Ex 1 : Insert a single Document  --1
			Ex2 : Insert Multiple documents --2

					total --- 3docs in collection named ECE

2) Retrieve:

a. to retrieve all documents
	Syn ;	
		db.COLLECTION_NAME.find( )

	Ex :
		db.CSE.find( )  ------>retrieves all documents



b. to retrieve specific documents ( based on fielsd) :
	Syn :
		db.COLLCTION_NAME.find(field)

	Ex :
		db.CSE.find({"Course" : "PSQT" })   ---> only where field name matches 


3) Update :
	Syn :	
		db.COLLECTION_NAME.update( {selection criteria} , {update criteria} )


	Ex:
		db.CSE.update({"Course" : "ATFL"} , {"Course" : "OS"})

		db.CSE.update({"Course" : "ATFL"} , {$set{"Course" : "OS"}})

4) Delete :

a. to remove all collections :
	Syn :
		db.COLLECTION_NAME.remove({})

	Ex : 
		db.CSE.remove({ })

b. to remove all documents that matches a condition

	Syn :
		db.COLLECTION_NAME.remove({Deletion_Criteria})

	Ex:
	db.COLLECTION_NAME.remove({"Course":"PFSD"})



c. To remove only single document that matches a document
	Syn :
								db.COLLECTION_NAME.remove({Deletion_Criteria},1)

	Ex:
		db.CSE.remove({"Course" : "PFSD"},1)

---------------------------------------------------------------------------

	
Find and pretty functions:

a. find
----------

this is used to retrieve a document
	a. to retrieve all
		db.CSE.find( )


	b. to retrieve docs based on a condition
		db.CSE.find( {"Category" : "FC-C5"} )




B. pretty functions
--------------------------
this is used to kdisplay the docs in more systemated manner or more structurised format

Syn
	db.COLLECTION_NAME.find( ).pretty

--------->>>>> pretty should be used with only find function

Ex:
	db.CSE.find( ).pretty( )

==============================================================

Connectivity b/w FE frontend(Flask) and BE backend(mongoDB)
			or
Database Connectivity
---------------------------------------------------------------------------------------------------------


















django framework
-------------------------------
-what is web application
-components of web appication
-introduction to Django framework
-how to create a django project
-how to create an app
-project structure and app structure  ------->***
-how to run an application
-views and http response
-Dynamic routing
-Template rendering
-Context Passing through template
-Redirect
-Template Inheritance
-Static content
-CRUD operations ----> database cource raghuram krishna white pad 1400 pages
-Session management
-Building User model, checking authentication and admin pannel configuration
-writing Models
-working on complete Django project from scratch


1) Web apllication
--------------
Local application
------------------------------
- runs on client/user machine.


-----------------------------------------------------------------------
Components of web application :

-- In general every web application framework architecture follows MVC architecture
-- 	M-model ------ > BE
	V view -------> FE
	C controller -----> connectivity

--	wheras Django framework follows a  MVT architecture
-- 	M-model ------ > BE
	V view -------> FE
	T template -----> Django framework provides a lot pof pre defined templates to the users or developer 


Global application
------------------------------
-runs on Web Server.

2)
3)

4) How to create a django project ::
--------------------------------------------------------
-open pycharm
- file-> new project -> S02DP
- terminal pip install Django
- django-admin startproject project1


5) How to create an app ::
-------------------------------------------

- terminal -> cd project1
- terminal -> python manage.py startapp pages


6) project structure and application structure :::
--------------------------------------------------------------------------------

S02DP
	-project1
		-project1
			__init__.py
			asgi.py
			settings.py
			urls.py
			wsgi.py

		-pages
			__init__.py
			admin.py
			apps.py
			models.py
			tests.py
			urls.py   -------------> we need to create ourselves ...
			views.py

-----------------------------------------------------------------------------------------------------------------------
7) How to run an application

terminal --> in project1 not app
project1 >>	python manage.py runserver

changes :
settings .py --> allowed host should be * 
and instaleld apps --> pages

and urls you need to use include command and include the urls of another app


8) views and HttpResponse :::


-------------------------------------------------------------------
9) Dynamic Routing :::





--------------------------------------------------
Introduction to Django

--	it is a web application framework written in python language
--	it is popular and very demanding because of its rapid development feature
--	it takes very less time to build an application compared to other frameworks
-- this framework is having famous tagline 
" The web framework for perfectionists with deadlines " 
	
	History
	------------
		>	Django was developed by lawrance Journal worle in 2003.

	Features of Django
	----------------------------
		1)	rapid development
		2)	open source
		3) very secure
		4)	fully loaded
		5) scalable  .......................... etc .................

	Some of the popular applications using Django framework :
	---------------------------------------------------------------------------------------------------------

		>	Instagram
		> 	Mozilla firefox browser
		> 	Pinterest
		>	etc .............


===================================================================================================

Redirect  :
------------------


=================================

CRUD Operations :
--------------------------------

> the diff operations which can be performed on a database are
	create & insert	
	retrieve
	update
	delete

=========================================\
Builtin User model , checking authentication & admin panel confguration
===============================================================
	

Built in user model 
-------------------------------------
from django.contrib.auth.models import User


checking authentication
------------------------------------------
from django.contrib.auth import authenticate


admin panel confguration
----------------------------------------------

open terminal
>python manage.py makemigrations
>python manage.py migrate
>>python manage.py createsuperuser

uname : __________
email _____________
password
pass again

super user created successfully

how to create a user in admin panel by writing code in view
----------------------------------------------------------------------------------------------
views.py

def registration(request):
	fname="abcd"
	lname="z"
	email="abcd@gmail.com"
	User.objects.create_user(fname, lname, email)
	return Httpresponse("User created successfully")

urls.py
	path('register/', registration,name="REG")

=================================================================================

Writing Models
--------------------------

>	models.py is nothing but defing a schema for ur database
> 	a model is a single, definitive source of info about ur data
> 	each model is pythn class which contains subb clases too
> each attribute of a model represents a db field


from django.db import models

# Create your models here.

class Student(models.Model):
    fname=models.CharField(max_length=40)
    lname = models.CharField(max_length=40)
    
    
class Vehicle(models.Model):
    regno=models.CharField(max_length=40)
    model=models.DateField()
    yrofman=models.IntegerField()


NOTE

fname and lnam of student modelare called fields. Each field is specified as class attribute and each attribute is mapped tp a database column






































